# -*- coding: utf-8 -*-
"""final code for model generation for website.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HS058nw30LE1TatWJlMvB39viqapvbuJ
"""

from google.colab import drive
drive.mount('/content/drive')

#final code for training the model and testing over the test dataset
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K

#setting image height and width
img_width, img_height = 256, 256

train_data_dir = '/content/drive/MyDrive/COVID_DATASET/Train'
validation_data_dir = '/content/drive/MyDrive/COVID_DATASET/Test'

#giving the number of training and testing samples
nb_train_samples =580
nb_validation_samples =166

#number of epochs for which the program will run
epochs = 20
#batch size of the assigned images
batch_size = 64
#number of classes in the model
num_classes=2

#checking the image format
if K.image_data_format() == 'channels_first':
    input_shape = (3, img_width, img_height)
else:
    input_shape = (img_width, img_height, 3)

#making the model
model = Sequential()
model.add(Conv2D(64, (2, 2), input_shape=input_shape))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(128, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(1024))
model.add(Activation('relu'))
model.add(Dropout(0.30))
model.add(Dense(2))
model.add(Activation('softmax'))

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

#feeding the data using train,test and validation generatot
train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1. / 255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical')

validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical')

model.fit_generator(
    train_generator,
    steps_per_epoch=nb_train_samples // batch_size,
    epochs=epochs,
    validation_data=validation_generator,
    validation_steps=nb_validation_samples // batch_size)

#saving the model to the local directory
#from keras.models import load_model

model.save_weights('model_saved.h5')

import numpy as np
# correct solution:
def softmax(x):
    """Compute softmax values for each sets of scores in x."""
    e_x = np.exp(x - np.max(x))
    return e_x / e_x.sum(axis=0) # only difference

from keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array

x = load_img('/content/drive/MyDrive/COVID_DATASET/Test/covid/2020.03.26.20041426-p11-119.png', target_size=(img_width,img_height))
x = img_to_array(x)
x = np.expand_dims(x, axis=0)
array = model.predict(x)

result = array[0]
print(result)

answer1 = softmax(result)
answer=np.argmax(answer1)
print(answer)
if(answer==0.0):
  label='covid'
else:   
  label='non-covid'            
            
print(label)

